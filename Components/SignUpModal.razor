<BSToaster/>
@inject IBlazorStrap blazorStrap

<BSModal DataId="model9" OnShow="@(() => NewUser(new User()))" HideOnValidSubmit="true" IsStaticBackdrop="true">
    <BSForm Model="model" OnValidSubmit="@Update">
        <DataAnnotationsValidator/>
        <BSModalHeader><span class="modalTitle">Register</span></BSModalHeader>
        <BSModalContent>
            <div class="modalInput">
                <BSLabel>First Name</BSLabel>
                <BSInput InputType="InputType.Text" placeholder="John" @bind-Value="model.FirstName" />
                <BSFeedback For="@(() => model.FirstName)"/>
            </div>
            <div class="modalInput">
                <BSLabel>Last Name</BSLabel>
                <BSInput InputType="InputType.Text" placeholder="Doe" @bind-Value="model.LastName"/>
                <BSFeedback For="@(() => model.LastName)" />
            </div>
            <div class="modalInput">
                <BSLabel>Email address</BSLabel>
                <BSInput InputType="InputType.Email" placeholder="name@example.com" @bind-Value="model.Email" />
                <BSFeedback For="@(() => model.Email)" />
            </div>
            <div class="modalInput">
                <BSLabel>Password</BSLabel>
                <BSInput InputType="InputType.Password" placeholder="Your password..." @bind-Value="model.Password" />
                <BSFeedback For="@(() => model.Password)" />
            </div>
        </BSModalContent>
        <BSModalFooter>
            <BSButton Target="model9" Color="BSColor.Danger">Cancel</BSButton>
            <BSButton IsSubmit="true" Color="BSColor.Primary">Save</BSButton>
        </BSModalFooter>
    </BSForm>
</BSModal>

<BSButton Color="BSColor.Primary" Target="model9">Sign Up</BSButton>
@code {
    BSModal? refModal;
    private User model = new User();

    private async Task NewUser(User e)
    {
        model = e; 
    }

    private async Task Update()
    {
        blazorStrap.Toaster.Add("Fake record added!", options => options.CloseAfter = 5000);
    }

    public class User
    {
        [Required(ErrorMessage = "User's First name must be provided.")]
        public string? FirstName { get; set; }

        [Required(ErrorMessage = "User's Last name must be provided.")]
        public string? LastName { get; set; }

        [Required(ErrorMessage = "User's Email address must be provided.")]
        [EmailAddress(ErrorMessage = "User's Email address must be valid.")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Password must be provided.")]
        public string? Password { get; set; }
    }
}