<BSToaster/>
@inject IBlazorStrap blazorStrap
@inject HttpClient Http
@inject NavigationManager NavigationManager

<BSModal DataId="model9" Size="Size.Large" IsCentered="true" OnShow="@(() => AddUser(new User()))" HideOnValidSubmit="true" IsStaticBackdrop="true">
    <BSForm Model="NewUser" OnValidSubmit="@RegisterUser">
        <DataAnnotationsValidator/>
        <BSModalHeader><span class="modalTitle">Register</span></BSModalHeader>
        <BSModalContent>
            <div class="modalInput">
                <BSLabel>First Name</BSLabel>
                <BSInput InputType="InputType.Text" placeholder="John" @bind-Value="NewUser.Name" />
                <BSFeedback For="@(() => NewUser.Name)" />
            </div>
            <div class="modalInput">
                <BSLabel>Last Name</BSLabel>
                <BSInput InputType="InputType.Text" placeholder="Doe" @bind-Value="NewUser.LastName" />
                <BSFeedback For="@(() => NewUser.LastName)" />
            </div>
            <div class="modalInput">
                <BSLabel>Email address</BSLabel>
                <BSInput InputType="InputType.Email" placeholder="name@example.com" @bind-Value="NewUser.Email" />
                <BSFeedback For="@(() => NewUser.Email)" />
            </div>
            <div class="modalInput">
                <BSLabel>Password</BSLabel>
                <BSInput InputType="InputType.Password" placeholder="Your password..." @bind-Value="NewUser.Password" />
                <BSFeedback For="@(() => NewUser.Password)" />
            </div>
        </BSModalContent>
        <BSModalFooter>
            <BSButton Target="model9" Color="BSColor.Danger">Cancel</BSButton>
            <BSButton IsSubmit="true" Color="BSColor.Primary">Save</BSButton>
        </BSModalFooter>
    </BSForm>
</BSModal>

<BSButton Color="BSColor.Primary" IsOutlined="true" Class="w-50 fs-3 shadow-lg" Target="model9">Sign Up</BSButton>

@code {
    BSModal? refModal;
    private User NewUser = new User();

    private async Task AddUser(User e)
    {
        NewUser = e;
    }

    private async Task RegisterUser()
    {
        var response = await Http.PostAsJsonAsync("http://localhost:5235/User", NewUser);
        if (response.IsSuccessStatusCode)
        {            
            blazorStrap.Toaster.Add("SUCCESS!", options => {
                options.CloseAfter = 2000;
                options.Color = BSColor.Success;
            });
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/somepage");
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine(errorContent);
            Console.WriteLine(response);
            blazorStrap.Toaster.Add("ERROR...", options => {
                options.CloseAfter = 5000;
                options.Color = BSColor.Danger;
            });
        }
    }

    public class User
    {
        [Required(ErrorMessage = "User's First name must be provided.")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "First name must have 6 to 50 characters.")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "User's Last name must be provided.")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Last name must have 6 to 50 characters.")]
        public string? LastName { get; set; }

        [Required(ErrorMessage = "User's Email address must be provided.")]
        [EmailAddress(ErrorMessage = "User's Email address must be valid.")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Password must be provided.")]
        [StringLength(50, MinimumLength = 8, ErrorMessage = "Password must have 6 to 50 characters.")]
        public string? Password { get; set; }
    }
}